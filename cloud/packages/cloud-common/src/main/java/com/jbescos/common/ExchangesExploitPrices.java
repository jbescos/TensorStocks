package com.jbescos.common;

import java.util.Map;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;

import com.jbescos.exchange.PublicAPI;
import com.jbescos.exchange.Utils;

public class ExchangesExploitPrices {

    private final CloudProperties cloudProperties;
    
    public ExchangesExploitPrices(CloudProperties cloudProperties) {
        this.cloudProperties = cloudProperties;
    }
    
    public void execute() throws Exception {
        Client client = ClientBuilder.newClient();
        PublicAPI publicAPI = new PublicAPI(client);
        Map<String, Double> binancePrices = Utils.simplePrices(publicAPI.priceBinance());
        // It looks wrong, but sell price is higher than buy
        Map<String, Double> kucoinSellPrices = Utils.simplePrices(publicAPI.priceKucoin());
        Map<String, Double> kucoinBuyPrices = Utils
                .simplePrices(publicAPI.priceKucoin(ticker -> Double.parseDouble(ticker.getSell())));
        try (TelegramBot telegram = new TelegramBot(cloudProperties, client)) {
            for (String symbol : cloudProperties.BOT_WHITE_LIST_SYMBOLS) {
                Double binanceSellPrice = binancePrices.get(symbol);
                Double binanceBuyPrice = binanceSellPrice;
                Double kucoinSellPrice = kucoinSellPrices.get(symbol);
                Double kucoinBuyPrice = kucoinBuyPrices.get(symbol);
                Boolean trade = null;
                if (benefit(binanceSellPrice, kucoinBuyPrice)) {
                    double profit = profitPerUnit(kucoinBuyPrice, binanceSellPrice);
                    if (profit > Utils.TRANSFER_MIN_PROFIT_UNIT) {
                        if (trade == null) {
                            trade = publicAPI.isSymbolEnabled(symbol);
                        }
                        if (trade) {
                            StringBuilder builder = new StringBuilder();
                            builder.append("ðŸ’£ ").append(symbol)
                                    .append(". Big difference of prices between exchanges detected\n");
                            builder.append("1. Buy ").append(symbol).append(" in Kucoin. Price: ")
                                    .append(Utils.format(kucoinBuyPrice)).append(Utils.USDT).append("\n");
                            builder.append("2. Transfer every ").append(symbol).append(" to your Binance wallet\n");
                            builder.append("3. Sell ").append(symbol).append(" in Binance. Price: ")
                                    .append(Utils.format(binanceSellPrice)).append(Utils.USDT).append("\n");
                            builder.append("Estimated benefit before commissions: ").append(Utils.format(profit))
                                    .append(" per unit");
                            telegram.sendMessage(builder.toString(), cloudProperties.TELEGRAM_CHAT_REPORT_ID);
                        } else {
//                            LOGGER.info(symbol + " is in maintenance but there is a profit of " + Utils.format(profit)
//                                    + " per unit");
                        }
                    }
                }
                if (benefit(kucoinSellPrice, binanceBuyPrice)) {
                    double profit = profitPerUnit(binanceBuyPrice, kucoinSellPrice);
                    if (profit > Utils.TRANSFER_MIN_PROFIT_UNIT) {
                        if (trade == null) {
                            trade = publicAPI.isSymbolEnabled(symbol);
                        }
                        if (trade) {
                            StringBuilder builder = new StringBuilder();
                            builder.append("ðŸ’£ ").append(symbol)
                                    .append(". Big difference of prices between exchanges detected\n");
                            builder.append("1. Buy ").append(symbol).append(" in Binance. Price: ")
                                    .append(Utils.format(binanceBuyPrice)).append(Utils.USDT).append("\n");
                            builder.append("2. Transfer every ").append(symbol).append(" to your Kucoin wallet\n");
                            builder.append("3. Sell ").append(symbol).append(" in Kucoin. Price: ")
                                    .append(Utils.format(kucoinSellPrice)).append(Utils.USDT).append("\n");
                            builder.append("Estimated benefit before commissions: ").append(Utils.format(profit))
                                    .append(" per unit");
                            telegram.sendMessage(builder.toString(), cloudProperties.TELEGRAM_CHAT_REPORT_ID);
                        } else {
//                            LOGGER.info(symbol + " is in maintenance but there is a profit of " + Utils.format(profit)
//                                    + " per unit");
                        }
                    }
                }
            }
        }
        client.close();
    }

    private static double profitPerUnit(double low, double high) {
        double diff = high - low;
        return diff / high;
    }

    private static boolean benefit(Double sellPrice, Double buyPrice) {
        if (sellPrice == null || buyPrice == null) {
            return false;
        } else if (sellPrice > buyPrice) {
            return true;
        } else {
            return false;
        }
    }
}
